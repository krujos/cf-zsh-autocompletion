#compdef cf
help_arg=""
cf_version=$(cf --version | awk '{print $3}' | sed -e 's/\.[0-9]\+.*//' | sed 's/\.//g')
if [[ "$cf_version" -ge "622" ]] ; then
	help_arg="-a"
fi

if [[ "${CF_ZSH_INCLUDE_SHORT}" == "true" ]] ; then 
   cf_help=$(CF_COLOR=FALSE cf help $help_arg | egrep -v '^\w' |  egrep -v 'CF_|HTTP' | tr ',' '\n' | awk '{print $1}' | egrep -v '\--|^\[|^cf$' | egrep '^[a-z]')
else 
   cf_help=$(CF_COLOR=FALSE cf help $help_arg | egrep -v '^\w' | awk '{print $1}' | tr -d ',' | egrep -v '\--|^\[|^cf$|CF_|HTTP' | egrep '^[a-z]')
fi

######################### Util functions ##########################

# Currently unused but I've written it twice so now it stays.
# param $1 org to compare against
# return 0 if it is the current, 1 otherwise.
is_current_org() { 
	local current_org
	current_org=$(CF_COLOR=false cf target  | grep Org | awk '{print $2}')
	if [[ "$current_org" == "$1" ]] ; then 
		return 0
	fi
	return 1
}

####################### Compadd Functions #########################
compadd_spaces() { 
	#Go back through words and see if an org was specified
	idx=${words[(i)-o]}	
	local spaces
	if [[ $idx < ${#words} ]] ; then 
		(( i = $idx + 1 ))
		spaces=($(CF_CLOLOR=FALSE cf org $words[$i] | grep spaces: | sed -e 's/spaces://' | tr -d ','))
	else
    	#If no org, the user proabably meant the current space, if they add it later
	    #this will make the wrong suggestions. We should proabably force the first 
	    #argument to be an org
		spaces=($(CF_COLOR=FALSE cf spaces | grep -v "Getting" | grep -v "^name" ))
	fi 
	compadd - $spaces #$(CF_COLOR=false cf spaces | grep -v "Getting" | grep -v "^name" )
}

#For things that print as tables that we're more or less intrested in everything after
#a keyword in $1 (awk)
compadd_tabley_thing_with_important_bit_in_first_position() { 
	cmd=$1
	search_word=$2
	compadd - $(CF_COLOR=FALSE cf ${cmd} | awk "/${search_word}/{a=1;next;}a" | awk '{print $1}')
}

compadd_apps() { 
	compadd_tabley_thing_with_important_bit_in_first_position "apps" "name"
}

compadd_service_instances() {
	compadd_tabley_thing_with_important_bit_in_first_position "services" "name"
}

compadd_orgs() { 
	compadd_tabley_thing_with_important_bit_in_first_position "orgs" "name"
}

compadd_domains() { 
	compadd_tabley_thing_with_important_bit_in_first_position "domains" "name"
} 

compadd_buildpacks() { 
	compadd_tabley_thing_with_important_bit_in_first_position "buildpacks" "position" 
} 
compadd_service_keys() {
	compadd - $(CF_COLOR=FALSE cf service-keys ${words[3]} | awk "/name/{a=1;next;}a" | awk '{print $1}')
} 
compadd_help_flags() { 
	cmd=$words[2]
	compadd - $(CF_COLOR=FALSE cf $cmd --help | awk "/OPTIONS/,/n/" | awk "/OPTIONS/{a=1;next;}a" | awk '{print $1}')
}

compadd_message() { 
	compadd -x $1
}

command_complete() { 
	compadd_message "Command is complete. Press <ENTER>"
} 

compadd_positional() { 
	positional=$(CF_COLOR=false cf $words[2] --help | grep -A1 USAGE | grep -v USAGE | awk "{print \$${#words}}")
	compadd_message "Enter value for $positional"
}

##################### Specific command functions ################
create_route() { 
	case ${#words} in
		3) compadd_spaces;;
		4) compadd_domains;;
		5) compadd_help_flags;;
		6) compadd -x "Enter hostname";;
		7) command_complete;;
	esac
}

##################### Command discovery functions ################

#$1 is the command (target, app, services, create-service etc)
find_command_flags() { 
	case $words[2] in 
		"target" | "t")
			case $words[-2] in 
				-o) compadd_orgs;;
				-s) compadd_spaces;;
				*) compadd_help_flags;;
			esac
			;;
		"service-keys") #A positional command, APP then SERVICE-INSTANCE
			case ${#words} in 
				3) compadd_service_instances;;
				4) command_complete;;
			esac
			;; #service-keys
		"create-service-key") #A positional command, APP then SERVICE-INSTANCE
			case ${#words} in 
				3) compadd_service_instances;;
				*) compadd_help_flags;;
			esac
			;; #create-service-key
		"service-key") #A positional command, APP then SERVICE-INSTANCE
			case ${#words} in 
				3) compadd_service_instances;;
				4) compadd_service_keys;;
				5) command_complete;;
			esac
			;; #service-key
		"delete-service-key") #A positional command, APP then SERVICE-INSTANCE
			case ${#words} in 
				3) compadd_service_instances;;
				4) compadd_service_keys;;
				5) command_complete;;
			esac
			;; #delete-service-key
		"unbind-service" | "us") #A positional command, APP then SERVICE-INSTANCE
			case ${#words} in 
				3) compadd_apps;; 
				4) compadd_service_instances;;
				5) command_complete;;
			esac
			;; #unbind-service
		"bind-service" | "bs") #A positional command, APP then SERVICE-INSTANCE
			case ${#words} in 
				3) compadd_apps;; 
				4) compadd_service_instances;;
				5) command_complete;;
			esac
			;; #bind-service
		"create-domain") #A positional ORG then DOMAIN
			case ${#words} in 
				3) compadd_orgs;;
				4) compadd_positional;;
				*) command_complete
			esac
			;;
		"delete" | "app" | "logs") #A positional with or without flags
			case ${#words} in
				3) compadd_apps;;
				*) compadd_help_flags;;
			esac
			;;
		"create-route") #A SPACE then DOMAIN with possible flags
			create_route
			;;
		"create-security-group") #A name then a path to a file. 
			case ${#words} in
				3) compadd_positional;;
				4) _files;;
				*) command_complete;;
			esac
			;;
		#TODO Combine the multiple prompt functions...
		"create-user") #Two strings. 
			case ${#words} in 
				3 | 4) compadd_positional;;
				*) command_complete;;
			esac
			;;
		"create-service-broker") #Bunch of strings
			case ${#words} in 
				3 | 4 | 5 | 6) compadd_positional;;
				*) command_complete;;
			esac
			;;
		"create-shared-domain") #One string for domain
			case ${#words} in 
				3) compadd_positional;;
				*) command_complete;;
			esac
			;;
		"create-space")
			case ${#words} in
				3) compadd_positional;;
				4) compadd_help_flags;;
				5) compadd_orgs;;
				*) command_complete;;
			esac
			;;
		"delete-buildpack")
			case ${#words} in
				3) compadd_buildpacks;;
				4) compadd_help_flags;;
				*) command_complete;;
			esac
			;;
		*)
			;;
	esac
} 

complete() { 
	local curcontext="$curcontext" state line
	typeset -A opt_args

	_arguments \
		'1: :->first' \
		'*: :->args'
	
	case $state in
		first) 
			_arguments "1: :($cf_help)"
			;;
		args)
			find_command_flags
			;;
	esac
}

complete "$@"
